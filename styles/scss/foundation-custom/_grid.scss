/*------------------------------------------------*\
    $GRID
\*------------------------------------------------*/

// Essentailly we've lifted and amended the foundation 4 grid

$include-html-classes: true;
$include-html-grid-classes: $include-html-classes;

// Media Queries

$screen-320: 320px;
$screen-480: 480px;
$screen-750: 769px; 
$screen-990: 990px; // 990px content area
$screen-1300: 1300px; // 1300px

$screen: "only screen";
$small: "only screen and (min-width: #{$screen-320})";
$medium: "only screen and (min-width: #{$screen-480})";
$large: "only screen and (min-width: #{$screen-750})";
$xlarge: "only screen and (min-width: #{$screen-990})";
$xxlarge: "only screen and (min-width: #{$screen-1300})";

$landscape: "only screen and (orientation: landscape)";
$portrait: "only screen and (orientation: portrait)";

// Grid Variables

$row-width: 1300px;
$column-gutter: 30px;
$total-columns: 12;

.page {
  // to create a page 'wrap' around the grid
  @include clearfix();
  width: 100%;
  margin: 0 auto;
  padding: $half-spacing-unit 0;
  background: #fff;
  @media (min-width: 1300px) {
    width: $row-width;
  }

}

.row .row,
.form-row .row {
  padding: 0;
}

//
// Grid Function
//

@function gridCalc($colNumber, $totalColumns) {
  @return percentage(($colNumber / $totalColumns));
}

//
// Grid Mixins
//

// For creating container, nested, and collapsed rows.
@mixin grid-row($behavior: false) {

  // use @include grid-row(nest); to include a nested row
  @if $behavior == nest {
    width: auto;
    margin-#{$default-float}: -($column-gutter/4);
    margin-#{$opposite-direction}: -($column-gutter/4);
    @media #{$large} {
      margin-#{$default-float}: -($column-gutter/2);
      margin-#{$opposite-direction}: -($column-gutter/2);
    }
    margin-top: 0;
    margin-bottom: 0;
    max-width: none;
  }

    // use @include grid-row(collapse); to collapsed a container row margins
  @else if $behavior == collapse {
    width: 100%;
    margin: 0;
    max-width: $row-width;
  }

    // use @include grid-row(nest-collapse); to collapse outer margins on a nested row
  @else if $behavior == nest-collapse {
    width: auto;
    margin: 0;
    max-width: none;
  }

    // use @include grid-row; to use a container row
  @else {
    width: 100%;
    margin-#{$default-float}: auto;
    margin-#{$opposite-direction}: auto;
    margin-top: 0;
    margin-bottom: 0;
    max-width: $row-width;
  }

  // Clearfix for all rows
  @include clearfix();

}

// For creating columns - @include these inside a media query to control small vs. large grid layouts
@mixin grid-column($columns:false, $last-column:false, $center:false, $offset:false, $push:false, $pull:false, $collapse:false, $float:true) {

  position: relative;

  // If collapsed, get rid of gutter padding
  @if $collapse {
    padding-left: 0;
    padding-right: 0;
  }

    // Gutter padding whenever a column isn't set to collapse
    // (use $collapse:null to do nothing)
  @else if $collapse == false {
    padding-left: $column-gutter / 4;
    padding-right: $column-gutter / 4;
    @media #{$large} {
      padding-left: $column-gutter / 2;
      padding-right: $column-gutter / 2;
    }
  }

  // If a column number is given, calculate width
  @if $columns {
    width: gridCalc($columns, $total-columns);

    // If last column, float naturally instead of to the right
    @if $last-column {
      float: $opposite-direction;
    }
  }

  // If offset, calculate appropriate margins
  @if $offset {
    margin-#{$default-float}: gridCalc($offset, $total-columns);
  }

  // Source Ordering, adds left/right depending on which you use.
  @if $push {
    #{$default-float}: gridCalc($push, $total-columns);
    #{$opposite-direction}: auto;
  }
  @if $pull {
    #{$opposite-direction}: gridCalc($pull, $total-columns);
    #{$default-float}: auto;
  }

  // If centered, get rid of float and add appropriate margins
  @if $center {
    margin-#{$default-float}: auto;
    margin-#{$opposite-direction}: auto;
    float: none !important;
  }

  @if $float {
    @if $float == left or $float == true {
      float: $default-float;
    } @else if $float == right {
      float: $opposite-direction;
    } @else {
      float: none;
    }
  }

}

@if $include-html-grid-classes != false {
  /* Grid HTML Classes */
  .row {
    @include grid-row;

    &.collapse {
      .column,
      .columns {
        @include grid-column($collapse: true);
      }
    }

    .row {
      @include grid-row($behavior: nest);
      &.collapse {
        @include grid-row($behavior: nest-collapse);
      }
    }

    padding-right: ($column-gutter / 4);
    padding-left: ($column-gutter / 4);

    @media (min-width: 750px) {
      padding-right: ($column-gutter / 2);
      padding-left: ($column-gutter / 2);
    }

  }

  .column,
  .columns {
    @include grid-column($columns: $total-columns);
  }

  @media only screen {

    .column,
    .columns {
      @include grid-column($columns: false);
    }

    @for $i from 1 through $total-columns {
      .small#{-$i} {
        @include grid-column($columns: $i, $collapse: null, $float: false);
      }
    }

    @for $i from 0 through $total-columns - 2 {
      .small-offset-#{$i} {
        @include grid-column($offset: $i, $collapse: null, $float: false);
      }
    }

    @for $i from 1 through $total-columns - 1 {
      .push#{-$i} {
        @include grid-column($push: $i, $collapse: null, $float: false);
      }
      .pull#{-$i} {
        @include grid-column($pull: $i, $collapse: null, $float: false);
      }
    }

    [class*="column"] + [class*="column"]:last-child {
      float: $opposite-direction;
    }
    [class*="column"] + [class*="column"].end {
      float: $default-float;
    }

    .column.small-centered,
    .columns.small-centered {
      @include grid-column($center: true, $collapse: null, $float: false);
    }
  }

  /* Styles for screens that are at least 480px; */
  @media #{$medium} {

    @for $i from 1 through $total-columns {
      .medium#{-$i} {
        @include grid-column($columns: $i, $collapse: null, $float: false);
      }
    }

    @for $i from 0 through $total-columns - 1 {
      .row .medium-offset-#{$i} {
        @include grid-column($offset: $i, $collapse: null, $float: false);
      }
    }

    @for $i from 1 through $total-columns - 1 {
      .push#{-$i} {
        @include grid-column($push: $i, $collapse: null, $float: false);
      }
      .pull#{-$i} {
        @include grid-column($pull: $i, $collapse: null, $float: false);
      }
    }

    .column.medium-centered,
    .columns.medium-centered {
      @include grid-column($center: true, $collapse: null, $float: false);
    }

    .column.medium-uncentered,
    .columns.medium-uncentered {
      margin-#{$default-float}: 0;
      margin-#{$opposite-direction}: 0;
      float: $default-float !important;
    }

    .column.medium-uncentered.opposite,
    .columns.medium-uncentered.opposite {
      float: $opposite-direction !important;
    }

  }

  /* Styles for screens that are at least 720px; */
  @media #{$large} {

    @for $i from 1 through $total-columns {
      .large#{-$i} {
        @include grid-column($columns: $i, $collapse: null, $float: false);
      }
    }

    @for $i from 0 through $total-columns - 1 {
      .row .large-offset-#{$i} {
        @include grid-column($offset: $i, $collapse: null, $float: false);
      }
    }

    @for $i from 1 through $total-columns - 1 {
      .push#{-$i} {
        @include grid-column($push: $i, $collapse: null, $float: false);
      }
      .pull#{-$i} {
        @include grid-column($pull: $i, $collapse: null, $float: false);
      }
    }

    .column.large-centered,
    .columns.large-centered {
      @include grid-column($center: true, $collapse: null, $float: false);
    }

    .column.large-uncentered,
    .columns.large-uncentered {
      margin-#{$default-float}: 0;
      margin-#{$opposite-direction}: 0;
      float: $default-float !important;
    }

    .column.large-uncentered.opposite,
    .columns.large-uncentered.opposite {
      float: $opposite-direction !important;
    }

  }

  /* Styles for screens that are at least 1020px; */
  @media #{$xlarge} {

    @for $i from 1 through $total-columns {
      .xlarge#{-$i} {
        @include grid-column($columns: $i, $collapse: null, $float: false);
      }
    }

    @for $i from 0 through $total-columns - 1 {
      .row .xlarge-offset-#{$i} {
        @include grid-column($offset: $i, $collapse: null, $float: false);
      }
    }

    @for $i from 1 through $total-columns - 1 {
      .push#{-$i} {
        @include grid-column($push: $i, $collapse: null, $float: false);
      }
      .pull#{-$i} {
        @include grid-column($pull: $i, $collapse: null, $float: false);
      }
    }

    .column.xlarge-centered,
    .columns.xlarge-centered {
      @include grid-column($center: true, $collapse: null, $float: false);
    }

    .column.xlarge-uncentered,
    .columns.xlarge-uncentered {
      margin-#{$default-float}: 0;
      margin-#{$opposite-direction}: 0;
      float: $default-float !important;
    }

    .column.xlarge-uncentered.opposite,
    .columns.xlarge-uncentered.opposite {
      float: $opposite-direction !important;
    }

  }

  /* Styles for screens that are at least 1300px; */
  @media #{$xxlarge} {

    @for $i from 1 through $total-columns {
      .xxlarge#{-$i} {
        @include grid-column($columns: $i, $collapse: null, $float: false);
      }
    }

    @for $i from 0 through $total-columns - 1 {
      .row .xxlarge-offset-#{$i} {
        @include grid-column($offset: $i, $collapse: null, $float: false);
      }
    }

    @for $i from 1 through $total-columns - 1 {
      .push#{-$i} {
        @include grid-column($push: $i, $collapse: null, $float: false);
      }
      .pull#{-$i} {
        @include grid-column($pull: $i, $collapse: null, $float: false);
      }
    }

    .column.xxlarge-centered,
    .columns.xxlarge-centered {
      @include grid-column($center: true, $collapse: null, $float: false);
    }

    .column.xxlarge-uncentered,
    .columns.xxlarge-uncentered {
      margin-#{$default-float}: 0;
      margin-#{$opposite-direction}: 0;
      float: $default-float !important;
    }

    .column.xxlarge-uncentered.opposite,
    .columns.xxlarge-uncentered.opposite {
      float: $opposite-direction !important;
    }

  }

}

// Testing Foundations IE8 grid fix:
/* The Grid ---------------------- */
.lt-ie9 .row {
  width: 940px;
  max-width: 100%;
  min-width: 768px;
  margin: 0 auto;
}

.lt-ie9 .row .row {
  width: auto;
  max-width: none;
  min-width: 0;
  margin: 0 -15px;
}

.lt-ie9 .row.large-collapse .column,
.lt-ie9 .row.large-collapse .columns {
  padding: 0;
}

.lt-ie9 .row .row {
  width: auto;
  max-width: none;
  min-width: 0;
  margin: 0 -15px;
}

.lt-ie9 .row .row.large-collapse {
  margin: 0;
}

.lt-ie9 .column, .lt-ie9 .columns {
  float: left;
  min-height: 1px;
  padding: 0 15px;
  position: relative;
}

.lt-ie9 .column.large-centered, .columns.large-centered {
  float: none;
  margin: 0 auto;
}

.lt-ie9 [class*="column"] + [class*="column"]:last-child {
  float: right;
}

.lt-ie9 [class*="column"] + [class*="column"].end {
  float: left;
}

.lt-ie9 .large-1,
.lt-ie9 .row .large-1 {
  width: 8.33333%;
}

.lt-ie9 .large-2,
.lt-ie9 .row .large-2 {
  width: 16.66667%;
}

.lt-ie9 .large-3,
.lt-ie9 .row .large-3 {
  width: 25%;
}

.lt-ie9 .large-4,
.lt-ie9 .row .large-4 {
  width: 33.33333%;
}

.lt-ie9 .large-5,
.lt-ie9 .row .large-5 {
  width: 41.66667%;
}

.lt-ie9 .large-6,
.lt-ie9 .row .large-6 {
  width: 50%;
}

.lt-ie9 .large-7,
.lt-ie9 .row .large-7 {
  width: 58.33333%;
}

.lt-ie9 .large-8,
.lt-ie9 .row .large-8 {
  width: 66.66667%;
}

.lt-ie9 .large-9,
.lt-ie9 .row .large-9 {
  width: 75%;
}

.lt-ie9 .large-10,
.lt-ie9 .row .large-10 {
  width: 83.33333%;
}

.lt-ie9 .large-11,
.lt-ie9 .row .large-11 {
  width: 91.66667%;
}

.lt-ie9 .large-12,
.lt-ie9 .row .large-12 {
  width: 100%;
}

.lt-ie9 .row .large-offset-1 {
  margin-left: 8.33333%;
}

.lt-ie9 .row .large-offset-2 {
  margin-left: 16.66667%;
}

.lt-ie9 .row .large-offset-3 {
  margin-left: 25%;
}

.lt-ie9 .row .large-offset-4 {
  margin-left: 33.33333%;
}

.lt-ie9 .row .large-offset-5 {
  margin-left: 41.66667%;
}

.lt-ie9 .row .large-offset-6 {
  margin-left: 50%;
}

.lt-ie9 .row .large-offset-7 {
  margin-left: 58.33333%;
}

.lt-ie9 .row .large-offset-8 {
  margin-left: 66.66667%;
}

.lt-ie9 .row .large-offset-9 {
  margin-left: 75%;
}

.lt-ie9 .row .large-offset-10 {
  margin-left: 83.33333%;
}

.lt-ie9 .pull-2 {
  right: 16.66667%;
}

.lt-ie9 .pull-3 {
  right: 25%;
}

.lt-ie9 .pull-4 {
  right: 33.33333%;
}

.lt-ie9 .pull-5 {
  right: 41.66667%;
}

.lt-ie9 .pull-6 {
  right: 50%;
}

.lt-ie9 .pull-7 {
  right: 58.33333%;
}

.lt-ie9 .pull-8 {
  right: 66.66667%;
}

.lt-ie9 .pull-9 {
  right: 75%;
}

.lt-ie9 .pull-10 {
  right: 83.33333%;
}

.lt-ie9 .push-2 {
  left: 16.66667%;
}

.lt-ie9 .push-3 {
  left: 25%;
}

.lt-ie9 .push-4 {
  left: 33.33333%;
}

.lt-ie9 .push-5 {
  left: 41.66667%;
}

.lt-ie9 .push-6 {
  left: 50%;
}

.lt-ie9 .push-7 {
  left: 58.33333%;
}

.lt-ie9 .push-8 {
  left: 66.66667%;
}

.lt-ie9 .push-9 {
  left: 75%;
}

.lt-ie9 .push-10 {
  left: 83.33333%;
}

/* Nicolas Gallagher's micro clearfix */
.lt-ie9 .row {
  *zoom: 1;
}

.lt-ie9 .row:before, .row:after {
  content: " ";
  display: table;
}

.lt-ie9 .row:after {
  clear: both;
}
